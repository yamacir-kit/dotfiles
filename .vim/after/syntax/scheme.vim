set autoindent
set complete+=k~/.meevax_completions
set lisp

let &iskeyword = '@,33,35-38,42-43,45-58,60-64,94,_,126'

let &foldlevel = 0

syntax keyword keyword
  \ ...
  \ call-with-current-continuation!
  \ check
  \ lazy
  \ syntax
  \ unless
  \ when

syntax keyword macro
  \ syntax-quote

syntax keyword function
  \ any
  \ binary-port?
  \ boolean=?
  \ bound-identifier=?
  \ construct-identifier
  \ default-exception-handler
  \ eager
  \ er-macro-transformer
  \ error
  \ every
  \ exact
  \ exact-integer?
  \ find
  \ finite?
  \ free-identifier=?
  \ generate-identifier
  \ identifier->symbol
  \ identifier=?
  \ identifier?
  \ identity
  \ inexact
  \ infinite?
  \ ir-macro-transformer
  \ length*
  \ lisp-transformer
  \ make-syntactic-closure
  \ print
  \ r6rs:identifier?
  \ rsc-macro-transformer
  \ sc-macro-transformer
  \ symbol=?
  \ syntactic-closure
  \ syntactic-closure?
  \ syntactic-continuation?
  \ textual-port?
  \ transformer?
  \ unspecified
  \ unwrap-syntax

auto filetype scheme let &lispwords = '
  \ begin,
  \ case,
  \ define,
  \ define-library,
  \ define-record-type,
  \ define-syntax,
  \ delay,
  \ do,
  \ fork,
  \ lambda,
  \ let*,
  \ let,
  \ let-syntax,
  \ letrec*,
  \ letrec,
  \ letrec-syntax,
  \ make-parameter,
  \ parameterize,
  \ quasiquote,
  \ quote,
  \ receive,
  \ set!,
  \ syntax-rules,
  \ unless,
  \ unquote,
  \ unquote-splicing,
  \ when,
  \'

if has('conceal')
  " syntax keyword Operator Alpha   conceal cchar=Œë
  " syntax keyword Operator Beta    conceal cchar=Œí
  " syntax keyword Operator Gamma   conceal cchar=Œì
  " syntax keyword Operator Delta   conceal cchar=Œî
  " syntax keyword Operator Epsilon conceal cchar=Œï
  " syntax keyword Operator Zeta    conceal cchar=Œñ
  " syntax keyword Operator Eta     conceal cchar=Œó
  " syntax keyword Operator Theta   conceal cchar=Œò
  " syntax keyword Operator Iota    conceal cchar=Œô
  " syntax keyword Operator Kappa   conceal cchar=Œö
  " syntax keyword Operator Lamda   conceal cchar=Œõ
  " syntax keyword Operator Mu      conceal cchar=Œú
  " syntax keyword Operator Nu      conceal cchar=Œù
  " syntax keyword Operator Xi      conceal cchar=Œû
  " syntax keyword Operator Omicron conceal cchar=Œü
  " syntax keyword Operator Pi      conceal cchar=Œ†
  " syntax keyword Operator Rho     conceal cchar=Œ°
  " syntax keyword Operator Sigma   conceal cchar=Œ£
  " syntax keyword Operator Tau     conceal cchar=Œ§
  " syntax keyword Operator Upsilon conceal cchar=Œ•
  " syntax keyword Operator Phi     conceal cchar=Œ¶
  " syntax keyword Operator Chi     conceal cchar=Œß
  " syntax keyword Operator Psi     conceal cchar=Œ®
  " syntax keyword Operator Omega   conceal cchar=Œ©

  " syntax keyword Operator alpha   conceal cchar=Œ±
  " syntax keyword Operator beta    conceal cchar=Œ≤
  " syntax keyword Operator gamma   conceal cchar=Œ≥
  " syntax keyword Operator delta   conceal cchar=Œ¥
  " syntax keyword Operator epsilon conceal cchar=Œµ
  " syntax keyword Operator zeta    conceal cchar=Œ∂
  " syntax keyword Operator eta     conceal cchar=Œ∑
  " syntax keyword Operator theta   conceal cchar=Œ∏
  " syntax keyword Operator iota    conceal cchar=Œπ
  " syntax keyword Operator kappa   conceal cchar=Œ∫
  " syntax keyword Operator lambda  conceal cchar=Œª
  " syntax keyword Operator mu      conceal cchar=Œº
  " syntax keyword Operator nu      conceal cchar=ŒΩ
  " syntax keyword Operator xi      conceal cchar=Œæ
  " syntax keyword Operator omicron conceal cchar=Œø
  " syntax keyword Operator pi      conceal cchar=œÄ
  " syntax keyword Operator rho     conceal cchar=œÅ
  " syntax keyword Operator sigma   conceal cchar=œÉ
  " syntax keyword Operator tau     conceal cchar=œÑ
  " syntax keyword Operator upsilon conceal cchar=œÖ
  " syntax keyword Operator phi     conceal cchar=œÜ
  " syntax keyword Operator chi     conceal cchar=œá
  " syntax keyword Operator psi     conceal cchar=œà
  " syntax keyword Operator omega   conceal cchar=œâ

  " syntax keyword SchemeConceal and  conceal cchar=‚àß
  " syntax keyword SchemeConceal nand conceal cchar=‚äº
  " syntax keyword SchemeConceal nor  conceal cchar=‚äΩ
  " syntax keyword SchemeConceal not  conceal cchar=‚àº
  " syntax keyword SchemeConceal or   conceal cchar=‚à®
  " syntax keyword SchemeConceal xor  conceal cchar=‚äª

  " syntax keyword SchemeConceal intersection conceal cchar=‚à©
  " syntax keyword SchemeConceal union        conceal cchar=‚à™

  " syntax keyword SchemeConceal cons conceal cchar=‚à∑

  " syntax match Operator /\s)\+$/ oneline display conceal cchar=~

  " syntax keyword SchemeConceal <= conceal cchar=‚â§
  " syntax keyword SchemeConceal >= conceal cchar=‚â•

  " syntax keyword SchemeConceal nabra  conceal cchar=‚àá

  " syntax keyword SchemeConceal define conceal cchar=Œî
  " ¬∂
  " ‚Ü¶
  " Œî
  " ‚©¥
  " ‚¶Ä
  " ‚àÉ
  " ‚®ü
  " ‚âú
  " ‚âù
  " ‚â°
  " ‚â£

  " syntax keyword SchemeConceal => conceal cchar=‚áí

  " syntax keyword SchemeConceal +      conceal cchar=Œ£
  " syntax keyword SchemeConceal *      conceal cchar=Œ†

  " syntax match   SchemeConceal "'()"  conceal cchar=‚àÖ
  " syntax match   SchemeConceal "'()"  conceal cchar=ùüò
  " syntax match   SchemeConceal "'()"  conceal cchar=ùüé
  " syntax match   SchemeConceal "'()"  conceal cchar=0Ã∏
  " syntax match   SchemeConceal "'()"  conceal cchar=√ò

  " syntax keyword SchemeConceal member conceal cchar=‚àà
  " syntax keyword SchemeConceal sqrt   conceal cchar=‚àö

  " syntax keyword SchemeConceal angle  conceal cchar=‚à†

  " syntax keyword SchemeConceal integral conceal cchar=‚à´

  highlight! link Conceal Operator

  setlocal conceallevel=1
endif
